[{"/Users/muher/Desktop/Web_Projects/shopify-challenge/src/index.js":"1","/Users/muher/Desktop/Web_Projects/shopify-challenge/src/components/App.js":"2","/Users/muher/Desktop/Web_Projects/shopify-challenge/src/components/Search.js":"3","/Users/muher/Desktop/Web_Projects/shopify-challenge/src/components/Nominations.js":"4","/Users/muher/Desktop/Web_Projects/shopify-challenge/src/components/HelperButton.js":"5"},{"size":35,"mtime":1609020329086,"results":"6","hashOfConfig":"7"},{"size":6799,"mtime":1609210368465,"results":"8","hashOfConfig":"7"},{"size":3745,"mtime":1609209287532,"results":"9","hashOfConfig":"7"},{"size":1745,"mtime":1609210397359,"results":"10","hashOfConfig":"7"},{"size":1865,"mtime":1609204415682,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"14","usedDeprecatedRules":"15"},"etfr9b",{"filePath":"16","messages":"17","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"18","usedDeprecatedRules":"15"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24","usedDeprecatedRules":"15"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"27"},"/Users/muher/Desktop/Web_Projects/shopify-challenge/src/index.js",["28"],"import App from \"./components/App\";",["29","30"],"/Users/muher/Desktop/Web_Projects/shopify-challenge/src/components/App.js",["31"],"import '../static/css/App.css';\nimport { render } from \"react-dom\";\nimport React, {useState, useEffect} from 'react'\nimport Search from './Search';\nimport Nominations from './Nominations';\nimport HelperButton from './HelperButton';\nimport TextField from '@material-ui/core/TextField';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Grid from '@material-ui/core/Grid';\nimport SearchIcon from '@material-ui/icons/Search';\n\nexport default function App() {\n  const [title, setTitle] = useState('');\n  const [list, setList] = useState([]);\n  const [open, setOpen] = useState(false);\n\n  // Snackbar for full nomination list\n  const snackbarOpen = () => {\n    setOpen(true);\n  };\n\n  const snackbarClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return;\n    }\n\n    setOpen(false);\n  };\n\n  // Search field handling\n  const handleChange = (event) => {\n    setTitle(event.target.value);\n  };\n\n  // Helper methods to search the nomination list\n  const findInList = (value) => {\n    for(var i = 0; i < list.length; i += 1) {\n        if(list[i][\"id\"] === value) {\n            return true;\n        }\n    }\n    return false;\n  }\n\n  const findIndex = (value) => {\n    for(var i = 0; i < list.length; i += 1) {\n        if(list[i][\"id\"] === value) {\n            return i;\n        }\n    }\n    return -1;\n  } \n\n  // Helper method to convert list to string for the cookie\n  const listToString = (list) => {\n    let listString = ''\n    list.forEach(item => listString += (JSON.stringify(item).substring(1, JSON.stringify(item).length-1) + \"|\"))\n    return listString.substring(0,listString.length-1);\n  }\n\n  // Methods to nominate and remove nominations\n  const nominate = (id, title, year) => {\n    let newList = [];\n    if (!findInList(id) && list.length < 5) {\n        \n        list.forEach(item => newList.push(item));\n\n        newList.push({id, title, year});\n        setList(newList);\n        setCookie(listToString(newList));\n\n        let box = document.getElementsByClassName(\"nomList\")[0];\n        box.classList.remove('collapseList');\n        if (newList.length === 1) box.classList.add('extendList1');\n        else if (newList.length === 2) box.classList.add('extendList2');\n        else if (newList.length === 3) box.classList.add('extendList3');\n        else if (newList.length === 4) box.classList.add('extendList4');\n    } \n    if (newList.length === 5 || list.length === 5) {\n      snackbarOpen();\n    }\n  };\n\n  const removeNomination = (id, title, year) => {\n    if (findInList(id)) {\n      let newList = [];\n      list.forEach(item => newList.push(item));\n      \n      const index = findIndex(id);\n      if (index > -1) {\n        newList.splice(index, 1);\n      }\n      setList(newList);\n      setCookie(listToString(newList));\n      let box = document.getElementsByClassName(\"nomList\")[0];\n      box.classList.remove('extendList1');\n      box.classList.remove('extendList2');\n      box.classList.remove('extendList3');\n      box.classList.remove('extendList4');\n      if (newList.length === 4) box.classList.add('collapseList4');\n      else if (newList.length === 3) box.classList.add('collapseList3');\n      else if (newList.length === 2) box.classList.add('collapseList2');\n      else if (newList.length === 1) box.classList.add('collapseList1');\n    }\n  }\n\n  // Cookie methods\n  function setCookie(newList) {\n    var d = new Date();\n    d.setTime(d.getTime() + (1*24*60*60*1000));\n    var expires = \"expires=\" + d.toGMTString();\n    document.cookie = \"list=\" + newList + \";\" + expires;\n  }\n  \n  function getCookie() {\n    var decodedCookie = decodeURIComponent(document.cookie);\n    var objects = decodedCookie.substring(5,);\n    return objects;\n  }\n  \n  function checkCookie() {\n    var listCookie=getCookie();\n    if (listCookie !== \"\") {\n      // Splitting the cookie saved data to properly convert the string back to list\n      let newList = listCookie.split(\"|\");\n      let filteredList = newList.filter(item => {return item !=='';});\n      let listToSet = []\n      filteredList.forEach(item => {\n        let properties = (item.split(\",\"))\n        let filteredProps = []\n        properties.forEach(item => filteredProps.push((item.substring(1, item.length-1)).split(\":\\\"\")))\n        let obj = {};\n\n        filteredProps.forEach(item => {\n          let key = item[0].substring(0,item[0].length-1);\n          let value = item[1].substring(0, item[1].length);\n          obj[key] = value;\n        })\n        listToSet.push(obj)\n      })\n      setList(listToSet)\n    } else {\n      setCookie(list);\n    }\n  }\n\n  useEffect(() => {\n    checkCookie();\n  },[])\n\n  const data = {list, title, nominate, findInList, removeNomination};\n\n  return (\n    <div className=\"App\" style={{paddingTop: 50}}>\n      <Grid container spacing={2} justify=\"center\" alignItems=\"flex-start\">\n        <Grid item sm={1}></Grid>\n        {/* backgroundImage: \"linear-gradient(0.25turn, #f6e8a7, #fae484, #fae484)\", */}\n        <Grid item xs={10} sm={10} style={{paddingBottom: 15}} >\n          <div>\n            <h1>The Shoppies: Movie Awards for Entrepreneurs</h1>\n            \n            <Grid container spacing={1} alignItems=\"flex-end\" style={{padding: 15, backgroundColor: \"#f4f3ee\",  borderRadius: 15, maxWidth: 550, boxShadow: '10px 10px rgba(239, 99, 81, .1)'}}>\n              <Grid item>\n                <SearchIcon/>\n              </Grid>\n              <Grid item>\n                <TextField \n                  label=\"Search\" \n                  name=\"title\" \n                  value={title} \n                  style={{width: 300}}\n                  onChange={handleChange}\n                />\n              </Grid>\n              <Grid item style={{paddingLeft: 25}}>\n                <HelperButton/>\n              </Grid>\n            </Grid>\n          </div>\n        </Grid>\n        <Grid item sm={1}></Grid>\n\n        <Grid item sm={1}></Grid>\n        <Grid item xs={10} sm={5} style={{padding: 15, backgroundColor: \"#f4f3ee\", minHeight: 675, borderRadius: 15,  boxShadow: '10px 10px rgba(239, 99, 81, .1)'}}>\n          <Search {...data}/>\n        </Grid>\n        <Grid className=\"nomList\" item xs={10} sm={5} style={{padding: 15, backgroundColor: \"#f4f3ee\", minHeight: 100, borderRadius: 15, borderLeft: \"#fbd589 5px solid\", boxShadow: '10px 10px rgba(239, 99, 81, .1)'}}>\n          <Nominations {...data}/>\n        </Grid>\n        <Grid item sm={1}></Grid>\n          <Snackbar\n            anchorOrigin={{\n              vertical: 'bottom',\n              horizontal: 'center',\n            }}\n            open={open}\n            autoHideDuration={3000}\n            onClose={snackbarClose}\n            message=\"Thank you for nominating 5 great movies!\"\n            style={{alignItems: \"center\"}}\n          />\n      </Grid>\n    </div>\n  );\n}\n\nrender(<App/>, document.getElementById(\"root\"));","/Users/muher/Desktop/Web_Projects/shopify-challenge/src/components/Search.js",["32"],"import React, {useState, useEffect} from 'react'\nimport PropTypes from 'prop-types';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\n\nexport default function Search({ title, list, nominate, findInList }) {\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n    const [items, setItems] = useState([]);\n\n    useEffect(() => {\n        fetch(\"http://www.omdbapi.com/?apikey=6cabd6be&s=\" + title)\n        .then(res => res.json())\n        .then(\n            (result) => {\n                setIsLoaded(true);\n                setItems([result]);\n            },\n            (error) => {\n                setIsLoaded(true);\n                setError(error);\n            }\n        )\n    }, [title])\n\n    \n\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return (\n        <div>\n            Loading...<CircularProgress /> \n        </div>\n        )\n    } else if (title.length > 0 && items[0].Response === \"True\") {\n        return (\n            <div style={{paddingRight: 16}}>\n                <h3 style={{paddingLeft: 16}}>Results for \"{title}\"</h3>\n                <ul>\n                    {items[0].Search.map(item => (\n                    <li key={item.imdbID}>\n                        <Grid container>\n                            <Grid item xs={10}>\n                                {item.Title} ({item.Year}) \n                            </Grid>\n                            <Grid item xs={2}>\n                                <Button \n                                    style={{margin: 5}} \n                                    className=\"btn\"\n                                    disabled = {findInList(item.imdbID) ? true : false}\n                                    variant=\"outlined\" \n                                    color=\"primary\"\n                                    onClick={() => nominate(item.imdbID, item.Title, item.Year)}\n                                    style={!findInList(item.imdbID) ? \n                                        {\n                                            background: 'linear-gradient(45deg, #E2BD64 25%, #fdc500 90%)',\n                                            // borderRadius: 3,\n                                            color: 'black',\n                                            // height: 45,\n                                            width: 120,\n                                            margin: 5,\n                                            boxShadow: '5px 5px rgba(226, 189, 100, .25)',\n                                        } : {\n                                            background: 'grey',\n                                            // borderRadius: 3,\n                                            color: 'black',\n                                            // height: 45,\n                                            margin: 5,\n                                            width: 120,\n                                            boxShadow: '5px 5px rgba(76, 76, 71, .15)',\n                                        }}>\n                                    <span>{findInList(item.imdbID) ? \"Nominated\": \"Nominate\"}</span>\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </li>\n                    ))}\n                </ul>\n            </div>\n        );\n    } else {\n        return (\n        <div>\n            <h3 style={{paddingLeft :16}}>\n                Search movie titles to get results...<br/>\n            </h3>\n        </div>);\n    }\n}\n\nSearch.propTypes = {\n    title: PropTypes.string.isRequired,\n};","/Users/muher/Desktop/Web_Projects/shopify-challenge/src/components/Nominations.js",["33"],"import React from 'react'\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\n\nexport default function Nominations({list, removeNomination}) {\n    return (\n        <div style={{paddingRight: 16}}>\n            <h3 style={{paddingLeft: 16}}>Nominations (Limit: 5)</h3>\n            <ul>\n                {list.map(item => (\n                    <li key={item.id}>\n                        <Grid container>\n                            <Grid item xs={10}>\n                                {item.title} ({item.year})\n                            </Grid>\n                            <Grid item xs={2}>\n                                <Button \n                                    className=\"btn2\"\n                                    style={{margin: 5}} \n                                    variant=\"outlined\" \n                                    color=\"secondary\"\n                                    onClick={() => removeNomination(item.id, item.title, item.year)}\n                                    style={{\n                                            background: 'linear-gradient(45deg, #f38375 35%, #ef6351 90%)',\n                                            color: 'white',\n                                            // height: 45,\n                                            margin: 5,\n                                            width: 120,\n                                            boxShadow: '5px 5px rgba(239, 99, 81, .15)',\n                                        }}>\n                                    Remove\n                                </Button>\n                            </Grid>\n                        </Grid>\n                    </li>\n                ))}\n            </ul>\n        </div>\n    )\n}","/Users/muher/Desktop/Web_Projects/shopify-challenge/src/components/HelperButton.js",[],["34","35"],{"ruleId":"36","severity":1,"message":"37","line":1,"column":8,"nodeType":"38","messageId":"39","endLine":1,"endColumn":11},{"ruleId":"40","replacedBy":"41"},{"ruleId":"42","replacedBy":"43"},{"ruleId":"44","severity":1,"message":"45","line":149,"column":5,"nodeType":"46","endLine":149,"endColumn":7,"suggestions":"47"},{"ruleId":"48","severity":1,"message":"49","line":57,"column":37,"nodeType":"50","endLine":74,"endColumn":43},{"ruleId":"48","severity":1,"message":"49","line":23,"column":37,"nodeType":"50","endLine":30,"endColumn":43},{"ruleId":"40","replacedBy":"51"},{"ruleId":"42","replacedBy":"52"},"no-unused-vars","'App' is defined but never used.","Identifier","unusedVar","no-native-reassign",["53"],"no-negated-in-lhs",["54"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkCookie'. Either include it or remove the dependency array.","ArrayExpression",["55"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["53"],["54"],"no-global-assign","no-unsafe-negation",{"desc":"56","fix":"57"},"Update the dependencies array to be: [checkCookie]",{"range":"58","text":"59"},[4584,4586],"[checkCookie]"]